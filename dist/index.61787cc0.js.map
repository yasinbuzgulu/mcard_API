{"mappings":"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","sources":["Applicant.ts","DataStorage.ts","typeScriptFiles/API/CityListFromAPI.ts","typeScriptFiles/API/ApplicantListFromAPI.ts","typeScriptFiles/API/CardListFromAPI.ts","typeScriptFiles/API/ApplicantControllerAPI.ts","typeScriptFiles/API/CardControllerAPI.ts","typeScriptFiles/API/CityControllerAPI.ts","typeScriptFiles/Managers/TableManager.ts","typeScriptFiles/Managers/ListManager.ts","Verifications.ts","City.ts","Card.ts","index.ts","typeScriptFiles/Managers/ApplicantManager.ts","typeScriptFiles/Managers/CityManager.ts","typeScriptFiles/Managers/CardManager.ts"],"sourcesContent":["import { City } from \"./City\";\nimport { IApplicant } from \"./typeScriptFiles/interface/IApplicant\";\n\n/**\n * Program başvuran kişinin bilgilerinin saklandığı sınıf\n */\n\nexport class Applicant implements IApplicant {\n  private _applicantName: string;\n  private _applicantSurname: string;\n  private _applicantBirthDate: string;\n  private _applicantID: number;\n  private _typeOfApplicantBasedOnAge: string;\n  private _typeOfApplicantBasedOnEducation: string;\n\n  constructor(applicantName: string, applicantSurname: string, applicantBirthDate: string, applicantID: number,\n     typeOfApplicantBasedOnAge: string, typeOfApplicantBasedOnEducation: string) {\n        this._applicantName = applicantName;\n        this._applicantSurname = applicantSurname;\n        this._applicantBirthDate = applicantBirthDate;\n        this._applicantID = applicantID;\n        this._typeOfApplicantBasedOnAge = typeOfApplicantBasedOnAge;\n        this._typeOfApplicantBasedOnEducation = typeOfApplicantBasedOnEducation;\n  }\n\n    get ApplicantName() {\n      return this._applicantName;\n    }\n    set ApplicantName(applicantName : string){\n      this._applicantName = applicantName;\n    }\n\n    get ApplicantSurname() {\n      return this._applicantSurname;\n    }\n    set ApplicantSurname(applicantSurname : string){\n      this._applicantSurname = applicantSurname;\n    }\n  \n    get ApplicantBirthDate() {\n      return this._applicantBirthDate;\n    }\n    set ApplicantBirthDate(applicantBirthDate : string){\n      this._applicantBirthDate = applicantBirthDate;\n    }\n\n    get ApplicantID() {\n      return this._applicantID;\n    }\n    set ApplicantID(applicantID : number){\n      this._applicantID = applicantID;\n    }\n\n    get ApplicantTypeBasedOnAge() {\n      return this._typeOfApplicantBasedOnAge;\n    }\n    set ApplicantTypeBasedOnAge(applicantTypeBasedOnAge : string){\n      this._typeOfApplicantBasedOnAge = applicantTypeBasedOnAge;\n    }\n\n    get ApplicantTypeBasedOnEducation() {\n      return this._typeOfApplicantBasedOnEducation;\n    }\n    set ApplicantTypeBasedOnEducation(applicantTypeBasedOnEducation : string){\n      this._typeOfApplicantBasedOnEducation = applicantTypeBasedOnEducation;\n    }  \n}\n\n","import { ApplicantListFromAPI } from './typeScriptFiles/API/ApplicantListFromAPI';\nimport { CardListFromAPI } from './typeScriptFiles/API/CardListFromAPI';\nimport { CityListFromAPI } from './typeScriptFiles/API/CityListFromAPI';\nimport { IApplicant } from './typeScriptFiles/interface/IApplicant';\nimport { ICard } from './typeScriptFiles/interface/ICard';\nimport { ICity } from './typeScriptFiles/interface/ICity';\n\nexport class DataStorage {\n  /**\n   * Programa kayıt olunan tüm verilerin tutulduğu sınıf\n   */\nstatic cities:  Array<ICity> = new Array();\nstatic applicants: Array<IApplicant> = new Array();\nstatic cards: Array<ICard> = new Array();\n\n/**\n * Default olarak programa basılan Şehir-olanak bilgileri\n */\n\nstatic createCityList() {\nthis.cities = CityListFromAPI.getCityViaXhr();\n /*\n  this.cities.push(\n      {\n        CityName: \"ISTANBUL\",\n        OpportunityName: \"OTOPARK\",\n        PerYearPrice: 225,\n        TopLimitYearValue: 1,\n        CityOpportunityId: 1\n      },\n      {\n        CityName: \"ISTANBUL\",\n        OpportunityName: \"KUTUPHANE\",\n        PerYearPrice: 400,\n        TopLimitYearValue: 3,\n        CityOpportunityId :2\n      },\n      {\n        CityName: \"ISTANBUL\",\n        OpportunityName: \"TIYATRO\",\n        PerYearPrice: 400,\n        TopLimitYearValue: 3,\n        CityOpportunityId:3\n      },\n      {\n        CityName: \"ANKARA\",\n        OpportunityName: \"KUTUPHANE\",\n        PerYearPrice: 300,\n        TopLimitYearValue: 4,\n        CityOpportunityId:4\n      },  {\n        CityName: \"BURSA\",\n        OpportunityName: \"KUTUPHANE\",\n        PerYearPrice: 250,\n        TopLimitYearValue: 5,\n        CityOpportunityId:5\n      },  {\n        CityName: \"ADANA\",\n        OpportunityName: \"KUTUPHANE\",\n        PerYearPrice: 200,\n        TopLimitYearValue: 5,\n        CityOpportunityId:6\n      },  {\n        CityName: \"IZMIR\",\n        OpportunityName: \"KUTUPHANE\",\n        PerYearPrice: 300,\n        TopLimitYearValue: 4,\n        CityOpportunityId:7\n      });\n*/\n    return this.cities;\n    \n  }\n\n/**\n * Default olarak programa basılan kullanıcı bilgileri\n */\n  static createApplicantlist() {\n   this.applicants = ApplicantListFromAPI.getApplicantViaXhr();\n   /* this.applicants.push(\n      {\n        ApplicantName :\"YASIN\",\n        ApplicantSurname: \"BUZGULU\",\n        ApplicantBirthDate: \"1997-09-05\",\n        ApplicantID: 53452312702,\n        ApplicantTypeBasedOnAge: \"Normal\",\n        ApplicantTypeBasedOnEducation:  \"Öğrenci\"\n      });\n      */\n      return this.applicants;\n  }\n\n  static createCardList () {\n    this.cards = CardListFromAPI.getCardViaXhr();\n\n    return this.cards;\n  }\n}\n\n\n\n","import { ICity } from \"../interface/ICity\";\n\nexport class CityListFromAPI {\n\n    static getCityViaXhr() {\n        let xhr = new XMLHttpRequest();\n        let cities :Array<ICity> = new Array();\n        xhr.open(\"GET\", 'http://localhost:8080/cities/');\n\n        xhr.onload = (event) => {\n\t\t\tvar data = JSON.parse(event.target.response);\n\t\t\tif (Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\t{\n\t\t\t\tdata._embedded.cities.forEach((city) => {\n\t\t\t\t\tcities.push({ \n\t\t\t\t\t\t\t\t\t\tCityName: city.cityName,\n                                        OpportunityName: city.opportunityName,\n                                        PerYearPrice: Number(city.perYearPrice),\n                                        TopLimitYearValue: Number(city.topLimitYearValue),\n                                        CityOpportunityId : Number(city.CityOpportunityId)\n      \t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log('error');\n\t\t\t  }\n\t\t};\n        xhr.onerror = (err) => {\n\t\t\tconsole.log('[Error]', err);\n\t\t  }\n\t\t  // Send XHR request\n\t\t  xhr.send();\n\t\t  return cities;\n    }\n}","import { IApplicant } from \"../interface/IApplicant\";\n\nexport class ApplicantListFromAPI {\n\n    static getApplicantViaXhr() {\n        let xhr = new XMLHttpRequest();\n        let applicants :Array<IApplicant> = new Array();\n        xhr.open(\"GET\", 'http://localhost:8080/applicants/');\n\n        xhr.onload = (event) => {\n\t\t\tvar data = JSON.parse(event.target.response);\n\t\t\tif (Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\t{\n\t\t\t\tdata._embedded.cities.forEach((applicant) => {\n\t\t\t\t\tapplicants.push({ \n  \n                        ApplicantName: applicant.applicantName,\n                        ApplicantSurname: applicant.applicantSurname,\n                        ApplicantBirthDate: applicant.applicantBirthDate,\n                        ApplicantID: Number(applicant.applicantID),\n                        ApplicantTypeBasedOnAge: (applicant.applicantTypeBasedOnAge),\n                        ApplicantTypeBasedOnEducation: (applicant.applicantTypeBasedOnEducation)\n      \t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log('error');\n\t\t\t  }\n\t\t};\n        xhr.onerror = (err) => {\n\t\t\tconsole.log('[Error]', err);\n\t\t  }\n\t\t  // Send XHR request\n\t\t  xhr.send();\n\t\t  return applicants;\n    }\n}","import { ICard } from \"../interface/ICard\";\n\nexport class CardListFromAPI {\n\n    static getCardViaXhr () {\n        let xhr = new XMLHttpRequest();\n        let applicants :Array<ICard> = new Array();\n        xhr.open(\"GET\", 'http://localhost:8080/cards/');\n\n        xhr.onload = (event) => {\n\t\t\tvar data = JSON.parse(event.target.response);\n\t\t\tif (Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\t{\n\t\t\t\tdata._embedded.cards.forEach((card) => {\n\t\t\t\t\tcards.push({ \n \n\n                        CardIdentitty: Number (card.identity),\n                        CardPrice: Number (card.price),\n                        CardExpiryDate: card.expiryDate,\n                        User: Number(card.applicant),\n                        City: (card.city),\n                        Opportunity: (card.opportunity)\n      \t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log('error');\n\t\t\t  }\n\t\t};\n        xhr.onerror = (err) => {\n\t\t\tconsole.log('[Error]', err);\n\t\t  }\n\t\t  // Send XHR request\n\t\t  xhr.send();\n\t\t  return applicants;\n    }\n}","import { DataStorage } from \"../../DataStorage\";\nimport { IApplicant } from \"../interface/IApplicant\";\n\n\nexport class ApplicantControllerAPI {\n/**\n * \n * @param IApplicant \t*\tVerilen parametre objesini HTTP POST metodu ile gönderen metod\n */\n    static createApplicantViaAPI (IApplicant) {\n        let xmlRequest = new XMLHttpRequest();\n        xmlRequest.open(\"POST\", 'http://localhost:8080/applicants/', false);\n        \n\t\txmlRequest.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t\txmlRequest.send(IApplicant);\n\t\twindow.location.reload();\n\t\tif (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\tconsole.log('error');\n\t\tDataStorage.createApplicantlist();\n    }\n\n    /**\n\t*\tVerilen IApplicant objesini HTTP PUT metodu ile düzenleyen sınıf, \n\t*/\n\tstatic editApplicantViaAPI(IApplicant, applicantID)\n\t{\n\t\tlet xmlRequest = new XMLHttpRequest();\n\t\txmlRequest.open(\"PUT\", 'http://localhost:8080/applicants/'+applicantID);\n\t\txmlRequest.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t\txmlRequest.send(IApplicant);\n\t\twindow.location.reload();\n\t\tif (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\tconsole.log('error');\n\t\tDataStorage.createApplicantlist();\n\t}\n\n\t/**\n\t* Verilen applicantID ile uygun IApplicant nesnesini silmek için HTTP DELETE metodunu çalıştırır.\n\t*/\n\tstatic deleteApplicantViaAPI(applicantID)\n\t{\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.open(\"DELETE\", 'http://localhost:8080/applicants/'+applicantID);\n\t\txhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t\txhr.send();\n\t\twindow.location.reload();\n\t\tif (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\tconsole.log('error');\n\t\tDataStorage.createApplicantlist();\n\t}\n\t\n\n\n}","import { DataStorage } from \"../../DataStorage\";\n\nexport class CardControllerAPI {\n\n        \n/**\n * \n * @param Icard nesnesini HTTP POST metodu ile gönderen metod\n */\n static createCardViaAPI (ICard) {\n    let xmlRequest = new XMLHttpRequest();\n    xmlRequest.open(\"POST\", 'http://localhost:8080/cards/', false);\n    \n    xmlRequest.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xmlRequest.send(ICard);\n    window.location.reload();\n    if (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n        console.log('error');\n    DataStorage.createCardList();\n}\n\n/**\n*\tVerilen ICard objesini HTTP PUT metodu ile düzenleyen sınıf, \n*/\nstatic editCardViaAPI(ICard, identity)\n{\n    let xmlRequest = new XMLHttpRequest();\n    xmlRequest.open(\"PUT\", 'http://localhost:1234/cards/'+identity);\n    xmlRequest.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xmlRequest.send(ICard);\n    window.location.reload();\n    if (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n        console.log('error');\n    DataStorage.createCardList();\n}\n\n/**\n* Verilen identity ile uygun ICard nesnesini silmek için HTTP DELETE metodunu çalıştırır.\n*/\nstatic deleteCityViaAPI(identity)\n{\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"DELETE\", 'http://localhost:1234/cities/'+identity);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xhr.send();\n    window.location.reload();\n    if (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n        console.log('error');\n    DataStorage.createCardList();\n}\n}","import { DataStorage } from \"../../DataStorage\";\n\nexport class CityControllerAPI {\n    \n/**\n * \n * @param ICity nesnesini HTTP POST metodu ile gönderen metod\n */\n    static createCityViaAPI (ICity) {\n        let xmlRequest = new XMLHttpRequest();\n        xmlRequest.open(\"POST\", 'http://localhost:8080/cities/', false);\n        \n\t\txmlRequest.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t\txmlRequest.send(ICity);\n\t\twindow.location.reload();\n\t\tif (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\tconsole.log('error');\n\t\tDataStorage.createCityList();\n    }\n\n    /**\n\t*\tVerilen ICity objesini HTTP PUT metodu ile düzenleyen sınıf, \n\t*/\n\tstatic editApplicantViaAPI(ICity, CityOpportunityId)\n\t{\n\t\tlet xmlRequest = new XMLHttpRequest();\n\t\txmlRequest.open(\"PUT\", 'http://localhost:8080/cities/'+CityOpportunityId);\n\t\txmlRequest.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t\txmlRequest.send(ICity);\n\t\twindow.location.reload();\n\t\tif (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\tconsole.log('error');\n\t\tDataStorage.createCityList();\n\t}\n\n\t/**\n\t* Verilen CityOpportunityId ile uygun ICity nesnesini silmek için HTTP DELETE metodunu çalıştırır.\n\t*/\n\tstatic deleteCityViaAPI(CityOpportunityId)\n\t{\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.open(\"DELETE\", 'http://localhost:8080/cities/'+CityOpportunityId);\n\t\txhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t\txhr.send();\n\t\twindow.location.reload();\n\t\tif (!Number(event.target.status) >= 200 && Number(event.target.status) < 400)\n\t\t\tconsole.log('error');\n\t\tDataStorage.createCityList();\n\t}\n}","import { DataStorage } from \"../../DataStorage\";\nimport { ApplicantControllerAPI } from \"../API/ApplicantControllerAPI\";\nimport { CardControllerAPI } from \"../API/CardControllerAPI\";\nimport { CityControllerAPI } from \"../API/CityControllerAPI\";\nimport { ListManager } from \"./ListManager\";\n\n\n\nexport class TableManager {\n\n static editUserTable (userList, i) {\n                let applicantNameEdit = <HTMLInputElement>(  document.getElementById(\"applicantNameAttach\")  );\n                applicantNameEdit.defaultValue = DataStorage.applicants[i].ApplicantName.toString();\n                let applicantSurnameEdit = <HTMLInputElement>(  document.getElementById(\"applicantSurnameAttach\")  );\n                applicantSurnameEdit.defaultValue = DataStorage.applicants[i].ApplicantSurname.toString(); \n        \n                let applicantIdEdit = <HTMLInputElement>(  document.getElementById(\"applicantIDAttach\")  );\n                applicantIdEdit.defaultValue = DataStorage.applicants[i].ApplicantID.toString(); \n\n                document.getElementById('applicantBirthDateAttach').value = DataStorage.applicants[i].ApplicantBirthDate.substring(0, 10);\n\n                if(DataStorage.applicants[i].ApplicantTypeBasedOnAge==\"Çocuk\") {\n                        document.getElementById(\"citizenTypeSelection\").value = '0'\n                }\n                else if (DataStorage.applicants[i].ApplicantTypeBasedOnAge==\"Normal\") {\n                        document.getElementById(\"citizenTypeSelection\").value = '1';\n                }\n                else if (DataStorage.applicants[i].ApplicantTypeBasedOnAge==\"Yaşlı\") {\n                        document.getElementById(\"citizenTypeSelection\").value = '2';\n                }\n\n                if(DataStorage.applicants[i].ApplicantTypeBasedOnEducation==\"Öğrenci\") {\n                        document.getElementById(\"applicatTypeSelection\").value = '0';\n                }\n                else if (DataStorage.applicants[i].ApplicantTypeBasedOnEducation==\"Sivil\") {\n                        document.getElementById(\"applicatTypeSelection\").value = '1';\n                }\n                else  {\n                        document.getElementById(\"applicatTypeSelection\").value = '2';\n                }\n        \n                ApplicantControllerAPI.editApplicantViaAPI(userList[i],userList[i].applicantID);\n               // DataStorage.applicants = DataStorage.applicants.filter (applicant => applicant.ApplicantName != userList[i].ApplicantName);\n                ListManager.refreshUserTable();\n        }\n\n static editCityTable (cityList, i) {\n                let cityNameEdit = <HTMLInputElement>(  document.getElementById(\"cityNameAttach\")  );\n                cityNameEdit.defaultValue = DataStorage.cities[i].CityName.toString();\n                let opportunityNameEdit = <HTMLInputElement>(  document.getElementById(\"opportunityNameAttach\")  );\n                opportunityNameEdit.defaultValue = DataStorage.cities[i].OpportunityName.toString(); \n                let perYearPriceEdit = <HTMLInputElement>(  document.getElementById(\"perYearPriceAttatch\")  );\n                perYearPriceEdit.value = DataStorage.cities[i].PerYearPrice.toString(); \n                let topLimitYearValueEdit = <HTMLInputElement>(  document.getElementById(\"topLimitYearValueAttach\")  );\n                topLimitYearValueEdit.defaultValue = DataStorage.cities[i].TopLimitYearValue.toString(); \n\n                CityControllerAPI.editApplicantViaAPI(cityList[i],cityList[i].CityOpportunityId);\n                //DataStorage.cities = DataStorage.cities.filter (cityOpportunity => (cityOpportunity.CityName+cityOpportunity.OpportunityName) != (cityList[i].CityName+cityList[i].OpportunityName));\n                ListManager.refreshCityOpportunityTable();\n        }\n\n static editCardTable(cardList, i) {\n                let id =cardList[i].applicant.toString();\n                let myApplicantId = (id.slice(id.length - 11));\n                document.getElementById(\"myUserSelect\").value = myApplicantId;\n                document.getElementById(\"myCityOpportunitySelect\").value = cardList[i].city[0];\n                let cardPriceValueEdit = <HTMLInputElement>(  document.getElementById(\"cardPriceAttach\")  );\n                cardPriceValueEdit.defaultValue = cardList[i]._price.toString(); \n                \n                CardControllerAPI.editCardViaAPI(cardList[i],cardList[i].identity);\n                //DataStorage.cards = DataStorage.cards.filter (card => (card.CardIdentitty) != (cardList[i].CardIdentitty));\n                ListManager.refreshCardTable();\n\n        }\n\n static resetUserPage() {\n                let applicantNameEdit = <HTMLInputElement>(  document.getElementById(\"applicantNameAttach\")  );\n                applicantNameEdit.defaultValue = \"\";\n                let applicantSurnameEdit = <HTMLInputElement>(  document.getElementById(\"applicantSurnameAttach\")  );\n                applicantSurnameEdit.defaultValue = \"\"; \n                let applicantSBirthDateEdit = <HTMLInputElement>(  document.getElementById(\"applicantBirthDateAttach\")  );\n                applicantSBirthDateEdit.value =\"\"; \n                let applicantIdEdit = <HTMLInputElement>(  document.getElementById(\"applicantIDAttach\")  );\n                applicantIdEdit.defaultValue = \"\"; \n                document.getElementById('userForm').reset() as HTMLFormElement;\n\n        }\n\n static resetCityPage() {\n                let cityNameEdit = <HTMLInputElement>(  document.getElementById(\"cityNameAttach\")  );\n                cityNameEdit.defaultValue = \"\";\n                let opportunityNameEdit = <HTMLInputElement>(  document.getElementById(\"opportunityNameAttach\")  );\n                opportunityNameEdit.defaultValue = \"\"; \n                let perYearPriceEdit = <HTMLInputElement>(  document.getElementById(\"perYearPriceAttatch\")  );\n                perYearPriceEdit.value = \"\"; \n                let topLimitYearValueEdit = <HTMLInputElement>(  document.getElementById(\"topLimitYearValueAttach\")  );\n                topLimitYearValueEdit.defaultValue = \"\"; \n                document.getElementById('cityForm').reset() as HTMLFormElement;\n\n         }\n\n static resetCardPage() {\n                let cardPriceEdit = <HTMLInputElement> (document.getElementById(\"cardPriceAttach\"));\n                cardPriceEdit.defaultValue = '';\n                let userSelectionEdit = <HTMLInputElement> (document.getElementById(\"myUserSelect\"));\n                userSelectionEdit.value=\"0\";\n                let citySelectionEdit = <HTMLInputElement> (document.getElementById(\"myCityOpportunitySelect\"));\n                citySelectionEdit.value=\"0\";\n                document.getElementById('cardForm').reset() as HTMLFormElement;\n\n        }\n\n}","import { DataStorage } from '../../DataStorage';\nimport { ApplicantControllerAPI } from '../API/ApplicantControllerAPI';\nimport { CardControllerAPI } from '../API/CardControllerAPI';\nimport { CityControllerAPI } from '../API/CityControllerAPI';\nimport { TableManager } from './TableManager';\nexport class ListManager {\n/**\n * Yeni Kart kaydında kaydedilen kullanıcıların listelendiği kısım\n */\n  static createUserSelectList(myUser) {\n    let selectList = document.createElement(\"select\");\n    selectList.id = \"myUserSelect\";\n    selectList.innerHTML = `<option value=\"none\" selected disabled hidden required> Lütfen Kullanıcı Seçiniz`;\n    myUser.appendChild(selectList);\n    for (let i = 0; i < DataStorage.applicants.length; i++) {\n      let option = document.createElement(\"option\");\n      option.value = DataStorage.applicants[i].ApplicantID.toString();\n      option.text = DataStorage.applicants[i].ApplicantName +\" \"+ DataStorage.applicants[i].ApplicantID;\n      selectList.appendChild(option);\n    }\n  }\n  /**\n   * Yeni kullanıcı eklendikçe, yeni kart kaydındaki kullanıcı selection listesini güncelleyen kısım\n   */\n  static updateUserSelectionList() {\n    let myUserSelectBox = document.getElementById(\"userField\");\n    myUserSelectBox.innerHTML = '';\n    ListManager.createUserSelectList(myUserSelectBox);\n  }\n/**\n * Yeni Kart kaydında şehir selection listesinin hazırlandığı kısım\n */\n  static createCityOpportunitySelectList(myCityOpportunity) {\n    let selectListCity = document.createElement(\"select\");\n    selectListCity.id = \"myCityOpportunitySelect\";\n    selectListCity.innerHTML = `<option value=\"none\" selected disabled hidden required>Lütfen Şehir-Olanak Seçiniz`;\n    selectListCity.onchange = function(evt){\n    var value = evt.target.value;\n    ListManager.createCitySelectList(myCityOpportunity,value);\n                };\n    myCityOpportunity.appendChild(selectListCity);\n    let city: string[] = [];\n    for(let i = 0; i < DataStorage.cities.length; i++) {\n      city.push(DataStorage.cities[i].CityName);\n    }\n    city = city.filter((element, i) => i === city.indexOf(element));\n\n    for (let i = 0; i < city.length; i++) {\n      let option = document.createElement(\"option\");\n      option.value = city[i] ;\n      option.text = city[i] ;\n      selectListCity.appendChild(option);\n    }\n  }\n/**\n * Yeni Kart kaydında şehir seçimine bağlı olarak olanakların checkbox lara koyulduğu kısım \n */\n    static createCitySelectList(myCitySelectBox,citiesName?) {\n    const checkBoxList = document.getElementById(\"checkBoxList\");\n    checkBoxList.innerHTML = \"\";\n    const myCityOpportunitySelect : HTMLInputElement  = document.getElementById(\"myCityOpportunitySelect\") as HTMLInputElement;\n    var selectedCitiesName = myCityOpportunitySelect.options[myCityOpportunitySelect.selectedIndex].value; \n    const citiesList = DataStorage.cities.filter(item => item.CityName == citiesName);\n\n    for (let i = 0; i < citiesList.length; i++) {\n\n      let selectListCity = document.createElement(\"input\");\n      selectListCity.type = \"checkbox\";\n      selectListCity.id = \"inputSelectOpportunity\" + i.toString();\n      selectListCity.name = \"selectOpportunity\";\n      selectListCity.value = citiesList[i].OpportunityName.toString();\n      var label = document.createElement('label');\n      label.htmlFor = \"inputSelectOpportunity\" + i.toString();\n      label.appendChild(document.createTextNode(citiesList[i].OpportunityName));\n      checkBoxList.appendChild(selectListCity);\n      checkBoxList.appendChild(label);\n    }\n  }\n/**\n * Şehir Selectiın List için Ekleme, Düzenleme ve silmelere işlemelerine bağlı değişikliklerin güncellendiği kısım\n */\n  static updateCityOpportunitySelectionList() {\n    let myCityOpportunitySelectBox = document.getElementById(\"cityOpportunityField\");\n    myCityOpportunitySelectBox.innerHTML = '';\n    ListManager.createCityOpportunitySelectList(myCityOpportunitySelectBox);\n  }\n  /**\n   *  olanak checkboxları için Ekleme, Düzenleme ve silmelere işlemelerine bağlı değişikliklerin güncellendiği kısım\n   */\n  static updateCitySelectionList() {\n    let myCityOpportunitySelectBox = document.getElementById(\"checkBoxList\");\n    myCityOpportunitySelectBox.innerHTML = '';\n    ListManager.createCitySelectList(myCityOpportunitySelectBox);\n  }\n\n/**\n * Kayıtlı kullanıcılar için listeleme ve tablo oluşturan kısım\n */\n  static createUserList(userList) {\n    let userTable = document.getElementById(\"userTableId\");\n    userTable.innerHTML = \"\";\n    let table = document.createElement(\"table\");\n    let t1body = document.createElement(\"tbody\");\n    table.id = \"userTableReferedId\";\n    table.innerHTML = `<thead>\n                              <tr>\n                              <th>İsim</th>\n                              <th>Soyisim</th>\n                              <th>Doğum Tarihi (YYYY-MM-DD)</th>\n                              <th>Kimlik Numarası</th>\n                              <th>Yaşa Göre Tip</th>\n                              <th>Eğitime Göre Tip</th>\n                              <th>Sil</th>\n                              <th>Düzenle</th>\n                              </tr>\n\t\t\t\t    \t\t\t    </thead>`;\n    userTable.appendChild(table);\n    for(let i = 0; i<userList.length; i++) {\n      let row = document.createElement(\"tr\");\n      let cell = document.createElement(\"td\");\n      let cellText = document.createTextNode(userList[i].ApplicantName);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(userList[i].ApplicantSurname);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(userList[i].ApplicantBirthDate);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(userList[i].ApplicantID);\n      cell.appendChild(cellText);\n\n      row.appendChild(cell);\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(userList[i].ApplicantTypeBasedOnAge);\n      cell.appendChild(cellText);\n\n      row.appendChild(cell);\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(userList[i].ApplicantTypeBasedOnEducation);\n      cell.appendChild(cellText);\n\n      row.appendChild(cell);\n      let cellButtonDelete = document.createElement(\"button\");\n      cell = document.createElement(\"td\");\n      cellButtonDelete.innerHTML = \"Sil\";\n\n      cellButtonDelete.addEventListener(\"click\", function () {\n        let confirmDelete = confirm (\"Kullanıcıyı silmek istediğinize emin misiniz? \\n Dikkat, Bu işlem geri alınamaz!\");\n        if (confirmDelete) {\n          ApplicantControllerAPI.deleteApplicantViaAPI(userList[i].ApplicantID);\n        //DataStorage.applicants = DataStorage.applicants.filter (applicant => \n        //(applicant.ApplicantName+applicant.ApplicantID) != (userList[i].ApplicantName+userList[i].ApplicantID));\n        ListManager.refreshUserTable();\n        ListManager.updateUserSelectionList();\n        }\n        return;\n      } \n      );\n\n      cell.appendChild(cellButtonDelete);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      let cellEditButton = document.createElement(\"button\");\n     // cellEditButton.setAttribute(\"href\", \"mainPage\");\n      cellEditButton.innerHTML = \"Düzenle\";\n      cellEditButton.addEventListener(\"click\", function() {\n        window.location.href = '#applicantPage';\n        TableManager.editUserTable(userList, i);\n        return;\n        \n      });\n      cell.appendChild(cellEditButton);\n      row.appendChild(cell);\n       t1body.appendChild(row);\n\n     }\n     table.appendChild(t1body);\n     userTable.appendChild(table);\n\n  }\n  /**\n   * Kullanıcı listesinin Ekleme, Düzenleme ve silme işlemelerine bağlı değişiklikler ile güncellendiği kısım\n   */\n  static refreshUserTable() {\n    let element = document.getElementById(\"userTableReferedId\");\n    element.innerHTML = \"\";\n    element.parentNode.removeChild(element);\n    ListManager.createUserList(DataStorage.applicants);\n  }\n  /**\n   * Kayıtlı şehir olanaklar için listeleme ve tablo oluşturan kısım\n   */\n  static createCityOpportunityList(cityOpportunityList) {\n    let cityOpportunityTable = document.getElementById(\"cityOpportunityTableId\");\n    cityOpportunityTable.innerHTML = '';\n    let table = document.createElement(\"table\");\n    let t1body = document.createElement(\"tbody\");\n    table.id = \"cityOpportunityTableReferedId\";\n    table.innerHTML = `<thead>\n                              <tr>\n                              <th>Şehir İsmi</th>\n                              <th>Olanak İsmi</th>\n                              <th>1 Yıl için Ücreti</th>\n                              <th>Tanımlanabileceği Max. Yıl</th>\n                              <th>Sil</th>\n                              <th>Düzenle</th>\n                              </tr>\n\t\t\t\t    \t\t\t    </thead>`;\n                      cityOpportunityTable.appendChild(table);\n    for(let i = 0; i<cityOpportunityList.length; i++) {\n      let row = document.createElement(\"tr\");\n      let cell = document.createElement(\"td\");\n      let cellText = document.createTextNode(cityOpportunityList[i].CityName);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(cityOpportunityList[i].OpportunityName);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(cityOpportunityList[i].PerYearPrice);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(cityOpportunityList[i].TopLimitYearValue);\n      cell.appendChild(cellText);\n\n      row.appendChild(cell);\n      let cellButtonDelete = document.createElement(\"button\");\n      cell = document.createElement(\"td\");\n      cellButtonDelete.innerHTML = \"Sil\";\n\n      cellButtonDelete.addEventListener(\"click\", function () {\n        let confirmDelete = confirm (\"Şehir - Olanak bilgisini silmek istediğinize emin misiniz? \\n Dikkat, Bu işlem geri alınamaz!\");\n        if (confirmDelete) {\n          CityControllerAPI.deleteCityViaAPI(cityOpportunityList[i].CityOpportunityId);\n        //DataStorage.cities = DataStorage.cities.filter (cityOpportunity => \n        //(cityOpportunity.CityName+cityOpportunity.OpportunityName) != (cityOpportunityList[i].CityName+cityOpportunityList[i].OpportunityName));\n        ListManager.refreshCityOpportunityTable();\n        ListManager.updateCityOpportunitySelectionList();\n        ListManager.updateCitySelectionList();\n        }\n        return;\n\n      } );\n\n      cell.appendChild(cellButtonDelete);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      let cellEditButton = document.createElement(\"button\");\n      cellEditButton.innerHTML = \"Düzenle\";\n      cellEditButton.addEventListener(\"click\", function() {\n        window.location.href = '#cityPage';\n        TableManager.editCityTable(cityOpportunityList,i);\n        return;\n        \n      });\n      cell.appendChild(cellEditButton);\n      row.appendChild(cell);\n       t1body.appendChild(row);\n\n     }\n     table.appendChild(t1body);\n     cityOpportunityTable.appendChild(table);\n\n  }\n  /**\n   *  Şehir-Olanak listesinin Ekleme, Düzenleme ve silme işlemelerine bağlı değişiklikler ile güncellendiği kısım\n   */\n  static refreshCityOpportunityTable() {\n    let element = document.getElementById(\"cityOpportunityTableReferedId\");\n    element.innerHTML = \"\";\n    element.parentNode.removeChild(element);\n    ListManager.createCityOpportunityList(DataStorage.cities);\n  }\n  /**\n   *Kayıtlı kartlar için listeleme ve tablo oluşturan kısım\n   */\n  static createCardList(cardList) {\n    let cardTable = document.getElementById(\"cardTableId\");\n    cardTable.innerHTML = \"\";\n    let table = document.createElement(\"table\");\n    let t1body = document.createElement(\"tbody\");\n    table.id = \"cardTableReferedId\";\n    table.innerHTML = `<thead>\n                              <tr>\n                              <th>Kart ID</th>\n                              <th>Kart Son Kullanma Tarihi</th>\n                              <th>Kullancı</th>\n                              <th>Şehir</th>\n                              <th>Olanak</th>\n                              <th>Sil</th>\n                              <th>Düzenle</th>\n                              </trcardListcardListcardList>\n\t\t\t\t    \t\t\t    </thead>`;\n    cardTable.appendChild(table);\n    for(let i = 0; i<cardList.length; i++) {\n      let row = document.createElement(\"tr\");\n      let cell = document.createElement(\"td\");\n      let cellText = document.createTextNode(cardList[i]._identity);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n    \n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(cardList[i]._expiryDate);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(cardList[i].applicant);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(cardList[i].city[0]);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n            //}\n\n      cell = document.createElement(\"td\");\n      cellText = document.createTextNode(cardList[i].opportunity);\n      cell.appendChild(cellText);\n      row.appendChild(cell);\n\n      row.appendChild(cell);\n      let cellButtonDelete = document.createElement(\"button\");\n      cell = document.createElement(\"td\");\n      cellButtonDelete.innerHTML = \"Sil\";\n\n      cellButtonDelete.addEventListener(\"click\", function () {\n        let confirmDelete = confirm (\"Kart bilgisini silmek istediğinize emin misiniz? \\n Dikkat, Bu işlem geri alınamaz!\");\n        if (confirmDelete) {\n        CardControllerAPI.deleteCityViaAPI(cardList[i]._identity);\n          //DataStorage.cards = DataStorage.cards.filter (card => (card._identity) != (cardList[i]._identity));\n        ListManager.refreshCardTable();\n        }\n        return;\n\n      } );\n\n      cell.appendChild(cellButtonDelete);\n      row.appendChild(cell);\n\n      cell = document.createElement(\"td\");\n      let cellEditButton = document.createElement(\"button\");\n      cellEditButton.innerHTML = \"Düzenle\";\n      cellEditButton.addEventListener(\"click\", function() {\n        window.location.href = '#cardPage';\n        TableManager.editCardTable(cardList,i);\n        return;\n        \n      });\n      cell.appendChild(cellEditButton);\n      row.appendChild(cell);\n       t1body.appendChild(row);\n\n     }\n     table.appendChild(t1body);\n     cardTable.appendChild(table);\n    }\n\n  static refreshCardTable() {\n    let element = document.getElementById(\"cardTableReferedId\");\n    element.innerHTML = '';\n    element.parentNode.removeChild(element);\n    ListManager.createCardList(DataStorage.cards);\n  }\n\n  /**\n   * Son kullanıcının kaldırıldığı kısım\n   */\n  static removeLast() {\n // DataStorage.applicants.pop();\n  DataStorage.applicants.splice(-1,1)\n}\n}","import { DataStorage } from \"./DataStorage\";\nimport { ListManager } from \"./typeScriptFiles/Managers/ListManager\";\n\n\nexport class Verifications {\n\n  static checkText(text) {\n  }\n\n  static checkID(idNumber?,cardId?) {\n    let helper = 0;\n      for(let i = 0; i<DataStorage.applicants.length; i++) {\n        if(idNumber.value == DataStorage.applicants[i].ApplicantID){\n          let confirmDelete = confirm (\"Girelen Id'ye (\" + idNumber.value+ \") sahip kayıtlı bir kullanıcı var.\\n Üzerine yazmak istediğinize emin misiniz? \\n Dikkat, Bu işlem geri alınamaz!\");\n          if (confirmDelete) {\n          let b = DataStorage.applicants.filter(function (e) {\n            return e.value === idNumber.value;\n        });\n          DataStorage.applicants.splice(DataStorage.applicants.findIndex(e => e.value === idNumber.value),1);\n          return true;\n        }else {helper =1; return false;}\n      }\n    }\n    if(helper==0) {return true;}\n    else {return false;}\n  }\n\n  static validateID(tcNumber) { \n    let myId = tcNumber;\n    tcNumber = (tcNumber.value).toString();\n    \n    // T.C. identity number 11 haneli olmalı\n    if (myId.value.length != 11)\n     { alert(\"Kimlik numrasını \" + myId.value.length+\" hane girdiniz. \\n Lütfen kimlik numaranızı 11 hane giriniz\"); return false; }\n    \n    const digits = tcNumber.split('');\n    // son 2 hane (10. and 11.) validasyon için tutulur\n    const d10 = Number(digits[9]);\n    const d11 = Number(digits[10]);\n\n    // ilk 10 hane toplanır/ tek haneler toplanır / çift haneler toplanır\n    let sumOf10 = 0;\n    let evens = 0;\n    let odds = 0;\n    \n    digits.forEach((digitNumber, index) => {\n      digitNumber = Number(digitNumber);\n        if (index < 10) sumOf10 += digitNumber;\n        if (index < 9) {\n            if ((index + 1) % 2 === 0) {\n                evens += digitNumber;\n            } else {\n                odds += digitNumber;\n            }\n        }\n    });\n    \n    // ilk 10 hane toplamının mod 10 nu 11. haneyi vermelidir.\n    if (sumOf10 % 10 != d11) \n    {alert(\"Girilen kimlik numarası hatalıdır! \\n Lütfen tekrar giriniz\");\n   return false; }\n    \n    // tek haneler tplamının 7 katından çift haneler çıkarılınca elde edilen değerin mod 10 nu 10. haneyi vermelidir\n    if (((odds * 7) - (evens)) % 10 != d10)\n    {alert(\"Girilen kimlik numarası hatalıdır! \\n Lütfen tekrar giriniz\");\n    return false; }\n    \n    return true;\n   }\n\n  static checkDate(inputDate) {\n    let today = new Date().toLocaleDateString()\n    var todayDate = Date.parse(today);\n    var enteredDate = Date.parse(inputDate);\n    if (todayDate < enteredDate) {\n    alert (\"Error!\");inputDate\n}\n  }\n\n  static checkCityOpportunity(city,opportunity) {\n        let helper = 0;\n    let cityLast = city.value.toUpperCase();\n    let opportunityLast = opportunity.value.toUpperCase();\n      for(let i = 0; i<DataStorage.cities.length; i++) {\n        if(cityLast == DataStorage.cities[i].CityName){\n          let confirmDelete = confirm (\"Girelen  (\" + cityLast + \"  ve \" + opportunityLast+ \") için mevcut bir kayıt var.\\n Üzerine yazmak istediğinize emin misiniz? \\n Dikkat, Bu işlem geri alınamaz!\");\n          if (confirmDelete) {\n            DataStorage.cities = DataStorage.cities.filter (cityOpportunity => (cityOpportunity.CityName+cityOpportunity.OpportunityName) != (DataStorage.cities[i].CityName+DataStorage.cities[i].OpportunityName));\n          return true;\n        }else {helper =1; return false;}\n      }\n    }\n    if(helper==0) {return true;}\n    else {return false;}\n  }\n\n  static checkCardExistence(myApplicant, mycity, cardList,idNumber) {\n                  let controller = 0;\n                for(let i = 0; i<cardList.length; i++) {\n                  let id =cardList[i].applicant.toString();\n                  let myApplicantId = (id.slice(id.length - 11));\n                  if(myApplicant.toString() == myApplicantId) {\n                    if(mycity == cardList[i].city.toString()) {\n                      let confirmDelete = confirm (\"Seçilen \" + myApplicant+ \" kullanıcısı için \" + mycity + \" şehri  adına daha önce kart oluşturulmuştur.\\n Üzerine yazmak istediğinize emin misiniz? \\n Dikkat, Bu işlem geri alınamaz!\");\n                      if (confirmDelete) {\n                        var ele_rem1 = cardList.splice(i, 1);\n                        return true;\n                      } else {controller =1; return false;}\n                    }\n                  }\n\n                }\n                if(controller==0) {return true;}\n                else {return false;}\n\n          }\n\n}","import { ICity } from \"./typeScriptFiles/interface/ICity\";\n\n/**\n * Programdaki şehir isimlerinin tutulduğu sınıf\n */\nexport class City implements ICity {\n  private _cityName : string;\n  private _opportunityName: string;\n  private _perYearPrice: number;\n  private _topLimitYearValue: number;\n  private _CityOpportunityId : number;\n\n  constructor(cityName:string, opportunityName: string, perYearPrice: number, topLimitYearValue: number, CityOpportunityId : number){\n    this._cityName = cityName; \n    this._opportunityName = opportunityName;\n    this._perYearPrice = perYearPrice;\n    this._topLimitYearValue = topLimitYearValue;\n    this.CityOpportunityId = CityOpportunityId\n}\n\n     get CityName() {\n       return this._cityName;\n     }\n     set CityName(cityName) {\n       this._cityName = cityName;\n     }\n\n     get OpportunityName() {\n      return this._opportunityName;\n    }\n    set OpportunityName(name) {\n      this._opportunityName=name;\n    }\n  \n    get PerYearPrice () {\n      return this._perYearPrice;\n    }\n    set PerYearPrice (perYearPrice) {\n      this._perYearPrice = perYearPrice;\n    }\n  \n    get TopLimitYearValue () {\n      return this._topLimitYearValue;\n    }\n    set TopLimitYearValue (topLimitYearValue) {\n      this._topLimitYearValue = topLimitYearValue;\n    }\n    get CityOpportunityId () {\n      return this._CityOpportunityId;\n    }\n    set CityOpportunityId (CityOpportunityId) {\n      this._CityOpportunityId = CityOpportunityId;\n    }\n}","import { Applicant } from './Applicant';\nimport { City } from \"./City\";\nimport { ICard } from \"./typeScriptFiles/interface/ICard\";\n\n/**\n * Programda tanımlı kartların ID, fiyat, son kullanım tarihi, kullanıcının ve şehir-olanağın tanımlandığı sınıf\n */\nexport class Card implements ICard {\n  private _identity: number;\n  private _price: number;\n  private _expiryDate: string;\n  private city:string ;\n  private applicant:string;\n  private opportunity: string;\n\n  constructor(identity: number, price:number, expiryDate: string, applicant:string, city:string, opportunity:string){\n    this._identity = identity;\n    this._price = price;\n    this._expiryDate = expiryDate;\n    this.applicant = applicant;\n    this.city = city;\n    this.opportunity = opportunity;\n\n  }\n  User: string;\n  City: string;\n  Opportunity: string;\n  CardIdentitty: number;\n  CardPrice: number;\n  CardExpiryDate: Date;\n\n\n  get Identity() {\n    return this._identity;\n  }\n  set Identitty(identity) {\n    this._identity = identity;\n  }\n\n  get Price() {\n    return this._price;\n  }\n  set Price(price) {\n    this._price = price;\n  }\n\n  get ExpiryDate() {\n    return this._expiryDate;\n  }\n  set ExpiryDate(expiryDate) {\n    this._expiryDate = expiryDate;\n  }\n\n\n}","import { Applicant } from './Applicant';\nimport { ApplicantManager } from './typeScriptFiles/Managers/ApplicantManager';\nimport { City } from './City';\nimport { CityManager } from './typeScriptFiles/Managers/CityManager';\nimport { DataStorage } from './DataStorage';\nimport { ListManager } from './typeScriptFiles/Managers/ListManager';\n// Import stylesheets\nimport './style.css';\nimport { TableManager } from './typeScriptFiles/Managers/TableManager';\nimport { CardManager } from './typeScriptFiles/Managers/CardManager';\n\n/**\n * Listeleri başlangıç halinde kapalı hale getiren kısım\n */\nconst userTableSection: HTMLElement = document.getElementById(\"userListSection\");\nuserTableSection.style.display = \"none\";\nconst cityOpportunityListSection: HTMLElement = document.getElementById(\"cityOpportunityListSection\");\ncityOpportunityListSection.style.display = \"none\";\nconst cardListSection: HTMLElement = document.getElementById(\"cardListSection\");\ncardListSection.style.display = \"none\";\n/**\n * Doğum taihini max olarak bugünün tarihine ayarlayan kısım\n */\ndocument.getElementById('applicantBirthDateAttach').max = new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n/**\n * Default olarak kullanıcı ve şehir-olanakların eklendiği kısım\n */\nlet cityList = DataStorage.createCityList();\nlet applicantList = DataStorage.createApplicantlist();\n/**\n * Yeni Kullancı kısmında kaydet butonuna tıklanınca karşılaşılacak senaryo\n */\nconst saveNewUser: HTMLElement = document.getElementById(\"newUserSavingButton\");\nconst userForm : HTMLFormElement = document.getElementById(\"userForm\") as HTMLFormElement;\nsaveNewUser.onclick = function() {    \n  if(userForm.reportValidity()){\n    ApplicantManager.createApplicantObject();\n    TableManager.resetUserPage();\n}\n};\n/**\n * * Yeni Kullancı kısmında listele butonuna tıklanınca karşılaşılacak senaryo\n */\nconst listUsers: HTMLElement = document.getElementById(\"listUserButton\");\nlistUsers.onclick = function() { \n  let myUserTableList = document.getElementById(\"userListSection\");\n  userTableSection.style.display = \"inline\";\n  cityOpportunityListSection.style.display = \"none\";\n  cardListSection.style.display = \"none\";\n  ListManager.createUserList(DataStorage.applicants);\n  }\n/**\n *  * Yeni Şehir-olanak kısmında kaydet butonuna tıklanınca karşılaşılacak senaryo\n */\nconst saveNewCityOpportunity: HTMLElement = document.getElementById(\"newCityAndOpportunitySavingButton\");\nconst cityForm : HTMLFormElement = document.getElementById(\"cityForm\") as HTMLFormElement;\nsaveNewCityOpportunity.onclick = function() { \n      if(cityForm.reportValidity()){\n      CityManager.createCityObject();\n      TableManager.resetCityPage();\n\n      }\n}\n/**\n * Yeni Şehir-olanak kısmında listele butonuna tıklanınca karşılaşılacak senaryo\n */\nconst listCitiesOpportunities: HTMLElement = document.getElementById(\"listCityOpportunityButton\");\nlistCitiesOpportunities.onclick = function() {\n  let myCityOpportunityTableList = document.getElementById(\"cityOpportunityListSection\");\n  userTableSection.style.display = \"none\";\n  cityOpportunityListSection.style.display = \"inline\";\n  cardListSection.style.display = \"none\";\n  ListManager.createCityOpportunityList(DataStorage.cities);\n}\n/**\n * Yeni Kart kısmında kaydet butonuna tıklanınca karşılaşılacak senaryo\n */\nconst saveNewCard: HTMLElement = document.getElementById(\"newCardSavingButton\");\nconst cardForm : HTMLFormElement = document.getElementById(\"cardForm\") as HTMLFormElement;\nsaveNewCard.onclick = function() {\n    CardManager.createCardObject();\n    TableManager.resetCardPage();\n    alert(\"Kart başarılı bir şekilde listeye eklendi.\");\n}\n/**\n * Yeni Kart kısmında listele butonuna tıklanınca karşılaşılacak senaryo\n */\nconst listCards: HTMLElement = document.getElementById(\"listCardButton\");\nlistCards.onclick = function() {\n  let myCityOpportunityTableList = document.getElementById(\"cardListSection\");\n  userTableSection.style.display = \"none\";\n  cityOpportunityListSection.style.display = \"none\";\n  cardListSection.style.display = \"inline\";\n  ListManager.createCardList(DataStorage.cards);\n}\n/**\n * Kart kaydındaki Select box ların oluşturulduğu kısım  \n */\nlet myUserSelectBox = document.getElementById(\"userField\");\nListManager.createUserSelectList(myUserSelectBox);  \nlet myCityOpportunitySelectBox = document.getElementById(\"cityOpportunityField\");\nListManager.createCityOpportunitySelectList(myCityOpportunitySelectBox);  \nlet myCitySelectBox = document.getElementById(\"checkBoxList\");\nListManager.createCitySelectList(myCitySelectBox,\"İstanbul\");  \n","import { Applicant } from \"../../Applicant\";\nimport { DataStorage } from \"../../DataStorage\";\nimport { ListManager } from \"./ListManager\";\nimport { ApplicantControllerAPI } from \"../API/ApplicantControllerAPI\";\nimport { Verifications } from \"../../Verifications\";\n/**\n *  * Program başvuran kişinin bilgilerinin oluşturulduğu ve verisaklamaya gönderildiği cardList sınıf\n */\nexport class ApplicantManager {\n\n  static createApplicantObject () {\n    let applicantName =<HTMLInputElement>document.getElementById(\"applicantNameAttach\");\n    Verifications.checkText(applicantName);\n    let applicantSurname =<HTMLInputElement>document.getElementById(\"applicantSurnameAttach\");\n    let applicantBirthDate =<HTMLInputElement>document.getElementById(\"applicantBirthDateAttach\");\n    Verifications.checkDate(applicantBirthDate);\n    let applicantID =<HTMLInputElement>document.getElementById(\"applicantIDAttach\");\n\n    const  selectedTypeOfApplicantBasedOnAgeInput = <HTMLInputElement>(document.getElementById(\"citizenTypeSelection\"));\n    let typeOfApplicantBasedOnAge;\n    switch (Number(selectedTypeOfApplicantBasedOnAgeInput.value)) {\n      case 0 : {   typeOfApplicantBasedOnAge = \"Çocuk\"; break;  }\n      case 2 : {   typeOfApplicantBasedOnAge = \"Yaşlı\"; break;  }\n      case 1 : {   typeOfApplicantBasedOnAge = \"Normal\"; break;  }\n    }\n      \n    const selectedTypeOfApplicantBasedOnEducationInput = <HTMLInputElement> (document.getElementById(\"applicatTypeSelection\"));\n    let typeOfApplicantBasedOnEducation;\n    switch(selectedTypeOfApplicantBasedOnEducationInput.value) {\n      case \"0\": { typeOfApplicantBasedOnEducation = \"Öğrenci\";  break; }\n      case \"1\": { typeOfApplicantBasedOnEducation = \"Sivil\";  break; }\n      case \"2\": {  typeOfApplicantBasedOnEducation = \"--\";  }\n    }\n    if(Verifications.checkID(applicantID)){\n      if(Verifications.validateID(applicantID)) {\n    let newApplicant = new Applicant(applicantName.value.toUpperCase(), applicantSurname.value.toUpperCase(),\n      applicantBirthDate.value, Number(applicantID.value), typeOfApplicantBasedOnAge, typeOfApplicantBasedOnEducation);\n    ApplicantControllerAPI.createApplicantViaAPI(newApplicant);\n\n   // DataStorage.applicants.push(newApplicant);\n    ListManager.updateUserSelectionList();\n    alert(\"Kullanıcı başarılı bir şekilde listeye eklendi.\");\n      }\n  }\n  \n  }\n\n  static getApplicantNameWithId (id : Number)  \n  {\n    let result = \"\";\n     DataStorage.applicants.forEach((applicant => {\n       if(applicant.ApplicantID === id )\n         result = applicant.ApplicantName;\n     }))\n     return result;\n  }\n  \n}\n","import { City } from '../../City';\nimport { DataStorage } from '../../DataStorage';\nimport { ListManager } from './ListManager';\nimport { Verifications } from '../../Verifications';\nimport { CityControllerAPI } from '../API/CityControllerAPI';\n/**\n * Şehir olanak bilgilerininin alınıp yeni şehir nesnelerinin oluşturulduğu sınıf\n */\nexport class CityManager {\n\n  static createCityObject() {\n    let cityName = <HTMLInputElement>(document.getElementById(\"cityNameAttach\"));\n    let opportunityName = <HTMLInputElement>(document.getElementById(\"opportunityNameAttach\"));\n    let perYearPrice = <HTMLInputElement>(document.getElementById(\"perYearPriceAttatch\"));\n    let topLimitYearValue = <HTMLInputElement>(document.getElementById(\"topLimitYearValueAttach\"));\n    let CityOpportunityId = Math.floor(Math.random() * 10000);\n\n    if(Verifications.checkCityOpportunity(cityName,opportunityName)){\n    let newCityAndOpportunity = new City(cityName.value.toUpperCase(), opportunityName.value.toUpperCase(), Number(perYearPrice.value), \n    Number(topLimitYearValue.value), Number(CityOpportunityId));    \n    \n    CityControllerAPI.createCityViaAPI(newCityAndOpportunity);\n    //DataStorage.cities.push(newCityAndOpportunity);\n    ListManager.updateCityOpportunitySelectionList();\n    ListManager.updateCitySelectionList();\n    alert(\"Şehir-Olanak başarılı bir şekilde listeye eklendi.\");\n\n  }\n  }\n\n  static getCityOpportunityNameWithId (id : Number)  \n  {\n    let result = \"\";\n     DataStorage.cities.forEach((city => {\n       if(city.CityOpportunityId === id )\n         result = city.CityName + city.OpportunityName;\n     }))\n     return result;\n  }\n}","import { Card } from \"../../Card\";\nimport { DataStorage } from \"../../DataStorage\";\nimport { Verifications } from \"../../Verifications\";\nimport { CardControllerAPI } from \"../API/CardControllerAPI\";\n\n/**\n * Kart bilgilerinin derlenip yeni kart nesnelerinin oluşturulduğu sınıf\n */\nexport class CardManager {\n\n  static createCardObject() {\n    let cardIdendity = Math.floor(Math.random() * 100000000);\n    let cardPrice = <HTMLInputElement> document.getElementById(\"cardPriceAttach\");\n\n    let todayDate = new Date();\n    let year = todayDate.getFullYear();\n    let month = todayDate.getMonth();\n    let day = todayDate.getDate();\n    let addedExpiryDateYear = 4;\n    let expiryDateValue = new Date(year + addedExpiryDateYear, month, day);\n    let expiryDate = (expiryDateValue.toDateString());\n    \n    const userSelector :HTMLElement = document.getElementById(\"myUserSelect\");\n    let selectedUserID = userSelector.options[userSelector.selectedIndex].value;\n    const resultUser = DataStorage.applicants.filter(item => item.ApplicantID == selectedUserID);\n\n\n    const citySelector :HTMLElement = document.getElementById(\"myCityOpportunitySelect\");\n    let selectedCityName = citySelector.options[citySelector.selectedIndex].value;\n    let resultCity = DataStorage.cities.filter(item => item.CityName == selectedCityName);\n   \n    let checkedUser : any = [];\n    for(let i =0; i<resultUser.length; i++){\n      checkedUser.push(resultUser[i].ApplicantName.toUpperCase() +\" \" + resultUser[i].ApplicantSurname.toUpperCase() + \" \" + resultUser[i].ApplicantID);\n      var myApplicant = resultUser[i].ApplicantID;\n      var typeCitizen = resultUser[i].ApplicantTypeBasedOnAge;\n      var typeApplicant = resultUser[i].ApplicantTypeBasedOnEducation;\n    }\n\n    let checkedCity : any = [];\n    for(let i =0; i<resultCity.length; i++){\n      checkedCity.push(resultCity[i].CityName.toUpperCase());\n    }\n\n    const opportunitySelector : HTMLElement = document.getElementById(\"checkBoxList\");\n    let element = <HTMLInputElement> document.getElementById(\"checkBoxList\");  \n    if (element.checked) {  }\n\n    var inputElems = document.getElementsByTagName(\"input\");\n    let checkedOpportunity: any =[]; \n    for (var i=0; i<inputElems.length; i++) {       \n       if (inputElems[i].type == \"checkbox\" && inputElems[i].checked == true){\n\n         checkedOpportunity.push( inputElems[i].value );\n        }\n    }\n    let result  = 0 ;\n    for(let i = 0; i<DataStorage.cities.length; i++){\n      if(checkedCity[0]==DataStorage.cities[i].CityName) {\n        for(let j = 0; j<checkedOpportunity.length; j++){\n          if(checkedOpportunity[j]==DataStorage.cities[i].OpportunityName) {\n              result = result + DataStorage.cities[i].PerYearPrice * DataStorage.cities[i].TopLimitYearValue ;\n          }\n        }\n      }\n    }\n    if(typeCitizen == \"Çocuk\" || typeCitizen == \"Yaşlı\") {\n      var finalPrice = 0;\n    } else {\n      if(typeApplicant == \"Öğrenci\") {\n        finalPrice = (result+Number(cardPrice.value))  - ((result+Number(cardPrice.value))/5);\n      }\n    }\n    if (Verifications.checkCardExistence(myApplicant,checkedCity,DataStorage.cards,cardIdendity)) {\n        let newCard = new Card (Number(cardIdendity), Number(cardPrice.value), expiryDate, checkedUser,checkedCity , checkedOpportunity ); \n       \n       CardControllerAPI.createCardViaAPI(newCard);\n        // DataStorage.cards.push(newCard);\n        alert(\"Normal ücret ; \\n\" +\" Kart Ücreti :\" + Number(cardPrice.value) +\"  Toplam Olanak Fiyatı :\"  + result +\"\\n Ödenecek tutar : \" + finalPrice );\n     }\n  }  static getCardWithId (id : Number)  \n  {\n    let result = \"\";\n     DataStorage.cards.forEach((card => {\n       if(card.CardIdentitty === id )\n         result = card.User + card.City + card.Opportunity;\n     }))\n     return result;\n  }\n\n\n}\n"],"names":["$fd0fdee7cc99b0ec$export$204867cd0e973d3","applicantName1","applicantSurname1","applicantBirthDate1","applicantID1","typeOfApplicantBasedOnAge","typeOfApplicantBasedOnEducation","_applicantName","_applicantSurname","_applicantBirthDate","_applicantID","_typeOfApplicantBasedOnAge","_typeOfApplicantBasedOnEducation","applicantName","applicantSurname","applicantBirthDate","applicantID","applicantTypeBasedOnAge","applicantTypeBasedOnEducation","$c64b5b56ca879e64$export$d38cf39d930860d4","createCityList","cities","xhr","XMLHttpRequest","Array","open","onload","event","data","JSON","parse","target","response","Number","status","_embedded","forEach","city","push","CityName","cityName","OpportunityName","opportunityName","PerYearPrice","perYearPrice","TopLimitYearValue","topLimitYearValue","CityOpportunityId","console","log","onerror","err","send","getCityViaXhr","this","createApplicantlist","applicants","applicant","ApplicantName","ApplicantSurname","ApplicantBirthDate","ApplicantID","ApplicantTypeBasedOnAge","ApplicantTypeBasedOnEducation","getApplicantViaXhr","cards","card","CardIdentitty","identity","CardPrice","price","CardExpiryDate","expiryDate","User","City","Opportunity","opportunity","getCardViaXhr","$5a9f123381c3f4be$export$6fd289684e3f6a56","createApplicantViaAPI","IApplicant","xmlRequest","setRequestHeader","window","location","reload","editApplicantViaAPI","deleteApplicantViaAPI","$1aa35dc62f198700$export$7fa8bd306f924ef","createCardViaAPI","ICard","createCardList","editCardViaAPI","deleteCityViaAPI","$1238378f569ff9f0$export$382bbffd18dad924","createCityViaAPI","ICity","$4e75d0c36b6337f8$export$b97c69811caccf93","userList","i","document","getElementById","defaultValue","toString","value","substring","$dce00f1f87291d17$export$263792f2d63ecf9c","refreshUserTable","cityList","refreshCityOpportunityTable","cardList","id","myApplicantId","slice","length","_price","refreshCardTable","reset","createUserSelectList","myUser","selectList","createElement","innerHTML","appendChild","option","text","updateUserSelectionList","myUserSelectBox","createCityOpportunitySelectList","myCityOpportunity","selectListCity","onchange","evt","createCitySelectList","filter","element","i1","indexOf","myCitySelectBox","citiesName","checkBoxList","myCityOpportunitySelect","options","selectedIndex","citiesList","item","type","name","label","htmlFor","createTextNode","updateCityOpportunitySelectionList","myCityOpportunitySelectBox","updateCitySelectionList","createUserList","userTable","table","t1body","row","cell","cellText","cellButtonDelete","addEventListener","confirm","cellEditButton","href","editUserTable","parentNode","removeChild","createCityOpportunityList","cityOpportunityList","cityOpportunityTable","editCityTable","cardTable","_identity","_expiryDate","editCardTable","removeLast","splice","$f036d53082a8076e$export$b8a31334446f8b6","idNumber","cardId","helper","e","findIndex","tcNumber","myId","alert","digits","split","d10","d11","sumOf10","evens","odds","digitNumber","index","inputDate","today","Date","toLocaleDateString","cityLast","toUpperCase","opportunityLast","cityOpportunity","myApplicant","mycity","controller","$2ca65f593c1d3dcd$export$60fec07c4d4430d6","cityName1","perYearPrice1","topLimitYearValue1","CityOpportunityId1","_cityName","_opportunityName","_perYearPrice","_topLimitYearValue","_CityOpportunityId","$b239c4defcbf7ebf$export$34cdf0c8e3b348f8","identity1","price1","expiryDate1","$1d0b25271a397a80$var$userTableSection","style","display","$1d0b25271a397a80$var$cityOpportunityListSection","$1d0b25271a397a80$var$cardListSection","max","getTime","getTimezoneOffset","toISOString","$1d0b25271a397a80$var$saveNewUser","$1d0b25271a397a80$var$userForm","onclick","reportValidity","checkText","checkDate","selectedTypeOfApplicantBasedOnAgeInput","checkID","validateID","newApplicant","result","createApplicantObject","resetUserPage","$1d0b25271a397a80$var$saveNewCityOpportunity","$1d0b25271a397a80$var$cityForm","Math","floor","random","checkCityOpportunity","newCityAndOpportunity","createCityObject","resetCityPage","$1d0b25271a397a80$var$saveNewCard","cardIdendity","cardPrice","todayDate","year","getFullYear","month","getMonth","day","getDate","toDateString","userSelector","selectedUserID","resultUser","citySelector","selectedCityName","resultCity","checkedUser","typeCitizen","typeApplicant","checkedCity","checked","inputElems","getElementsByTagName","checkedOpportunity","i2","i3","j","finalPrice","checkCardExistence","newCard","createCardObject","resetCardPage","$1d0b25271a397a80$var$myUserSelectBox","$1d0b25271a397a80$var$myCityOpportunitySelectBox","$1d0b25271a397a80$var$myCitySelectBox"],"version":3,"file":"index.61787cc0.js.map"}